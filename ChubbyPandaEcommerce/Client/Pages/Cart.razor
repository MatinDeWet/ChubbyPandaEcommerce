@page "/cart"
@inject ICartService _cartService
@inject IOrderService _orderService

<PageTitle>Shopping Cart</PageTitle>

@if (cartProducts == null ||  cartProducts.Count == 0)
{
    <span>@message</span>
}
else if(orderPlaced){
    <span>Thank you for yout order! you can check your orders <a href="orders">here</a></span>
}
else
{
<section class="h-100" style="background-color: #eee;">
  <div class="container h-100 py-5">
    <div class="row d-flex justify-content-center align-items-center h-100">
      <div class="col-10">

        <div class="d-flex justify-content-between align-items-center mb-4">
          <h3 class="fw-normal mb-0 text-black">Shopping Cart (@cartProducts.Count item in your cart)</h3>
@*          <div>
            <p class="mb-0"><span class="text-muted">Sort by:</span> <a href="#!" class="text-body">price <i
                  class="fas fa-angle-down mt-1"></i></a></p>
          </div>*@
        </div>
        @foreach (var product in cartProducts)
       {
        <div class="card rounded-3 mb-4">
          <div class="card-body p-4">
            <div class="row d-flex justify-content-between align-items-center">
              <div class="col-md-2 col-lg-2 col-xl-2">
                <img src="@product.ImageUrl"
                  class="img-fluid rounded-3 image" alt="@product.Title">
              </div>
              <div class="col-md-3 col-lg-3 col-xl-3">
                <p class="lead fw-normal mb-2">@product.Title</p>
                <p><span class="text-muted">Type: </span>@product.ProductType</p>
              </div>
              <div class="col-md-3 col-lg-3 col-xl-2 d-flex">
                <button class="btn btn-link px-2"
                  onclick="this.parentNode.querySelector('input[type=number]').stepDown()">
                  <i class="oi oi-minus"></i>
                </button>

                <input id="form1" min="0" name="quantity" value="@product.Quantity" type="number"
                  class="form-control form-control-sm" @onchange="@((ChangeEventArgs e)=> UpdateQuantity(e,product))"/>

                <button class="btn btn-link px-2"
                  onclick="this.parentNode.querySelector('input[type=number]').stepUp()" >
                  <i class="oi oi-plus"></i>
                </button>
              </div>
              <div class="col-md-3 col-lg-2 col-xl-2 offset-lg-1">
                <h5 class="mb-0">R @(product.Price * product.Quantity)</h5>
              </div>
              <div class="col-md-1 col-lg-1 col-xl-1 text-end pe-auto" @onclick="@(()=>RemoveProductFromCart(product.ProductId,product.ProductTypeID))">
                <a class="text-danger pe-auto"><i class="oi oi-trash"></i></a>
              </div>
            </div>
          </div>
        </div>   
       }

        <div class="card mb-4">
          <div class="card-body p-4 d-flex flex-row">
            <div class="form-outline flex-fill">
              <h5 class="mb-0">Total: R @cartProducts.Sum(p=>p.Price * p.Quantity)</h5>
            </div>
          </div>
        </div>

        <div class="card">
          <div class="card-body">
            <button type="button" class="btn btn-warning btn-block btn-lg" @onclick="PlaceOrder">Check Out</button>
          </div>
        </div>

      </div>
    </div>
  </div>
</section>
}


@code {
    List<CartProductDto> cartProducts = null;
    string message = "Loading Cart...";
    bool orderPlaced = false;


    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async void RemoveProductFromCart(int productId,int ProductTypeId)
    {
        await _cartService.RemoveProductFromCart(productId, ProductTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await _cartService.GetCartItemCount();
        cartProducts = await _cartService.GetCartProducts();
        if(cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty";
            cartProducts = new List<CartProductDto>();
        }
        else
        {
            cartProducts = await _cartService.GetCartProducts();
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductDto product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;

        await _cartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        await _orderService.PlaceOrder();
        await _cartService.GetCartItemCount();
        orderPlaced = true;
    }
}
