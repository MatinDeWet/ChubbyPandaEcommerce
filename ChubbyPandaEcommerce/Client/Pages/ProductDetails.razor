@page "/product/{id:int}"
@inject IProductService _productService
@inject ICartService _cartService

@if (product == null)
{
    <span>@message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src="@product.ImageUrl" alt="@product.Title">
        </div>
        <div class="media-body">
            <h2 class="mb-0">@product.Title</h2>
            <p>@product.Description</p>
            @if (product.Variants != null && product.Variants.Count > 1)
           {
               <div class="mb-3">
                    <select class="form-select" @bind="curTypeId">
                        @foreach (var variant in product.Variants)
                       {
                           <option value="@variant.ProductTypeId">@variant.ProductType.Name</option>
                       }
                    </select>
               </div>
           }

            @if (GetSelectedVariant() != null)
           {
               @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
              {
                  <h6 class="text-muted original-price">
                      R @GetSelectedVariant().OriginalPrice
                  </h6>
              }
            <h4 class="price">
                R @GetSelectedVariant().Price
            </h4>
           }
           <button type="button" class="btn btn-outline-secondary" @onclick="AddToCart">
               <i class="oi oi-cart">&nbsp;&nbsp;&nbsp;Add to cart</i>
           </button>
        </div>
    </div>
}

@code {
    private Product? product = null;
    private string message = string.Empty;
    private int curTypeId = 1;

    [Parameter]
    public int id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        message = "Loading products...";

        var result = await _productService.GetProduct(id);
        if (!result.Success)
        {
            message = result.Message;
        }
        else
        {
            product = result.Data;
            if (product.Variants.Count()>0)
            {
                curTypeId = product.Variants[0].ProductTypeId;
            }
        }
    }

    private ProductVariant GetSelectedVariant()
    {
        return product.Variants.FirstOrDefault(v => v.ProductTypeId == curTypeId);
    }

    private async Task AddToCart()
    {
        var productVariant = GetSelectedVariant();
        var cartItem = new CartItem
            {
                ProductId = productVariant.ProductId,
                ProductTypeId = productVariant.ProductTypeId
            };
            await _cartService.AddToCart(cartItem);
    }
}
