@inject IProductService _productService
@implements IDisposable 

@if (_productService.products == null || _productService.products.Count == 0)
{
   <span>@_productService.Message</span> 
}
else
{
    <ul class="list-unstyled">
        @foreach (var product in _productService.products)
       {
          <li class="media my-3">
              <div class="media-img-wrapper mr-2">
                  <a href="/product/@product.Id">
                      <img class="media-img" src="@product.ImageUrl" alt="@product.Title">
                  </a>
              </div>
              <div class="media-body">
                <a href="/product/@product.Id">
                      <h4 class="mb-0">@product.Title</h4>
                </a>
                <p>@product.Description</p>
                <h5 class="price">@GetPriceText(product)</h5>
              </div>
          </li> 
       } 
    </ul>
    @for (var i = 1; i <= _productService.PageCount; i++)
   {
       <a class="btn
          @(i == _productService.CurrentPage ? "btn-info" : "btn-outline-info") page-selection" 
          href="/search/@_productService.LastSearchText/@i">@i</a>
   }
}

@code {
    protected override void OnInitialized()
    {
        _productService.ProductsChanged += StateHasChanged;
    }
    public void Dispose()
    {
        _productService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variant = product.Variants;
        if (variant.Count == 0)
        {
            return string.Empty;
        }
        if (variant.Count == 1)
        {
            return $"R{variant[0].Price}";
        }
        return $"Starting at R{variant.Min(v => v.Price)}";
    }
}
